// ===== G√âN√âRATEUR DE CITATIONS - GUIDE √âTAPE PAR √âTAPE =====
// Projet : Assignment 1 - API REST avec JavaScript
// Objectif : Apprendre √† utiliser fetch() et manipuler le DOM

// Configuration de l'API
const API_URL = 'https://api.quotable.io/random';

// üéØ √âTAPE 0 : R√âCUP√âRATION DES √âL√âMENTS DOM
// Ces √©l√©ments sont d√©finis ici pour √™tre utilis√©s dans tout le script
const loadingElement = document.getElementById('loading');
const citationContainer = document.getElementById('citation-container');
const errorContainer = document.getElementById('error-container');
const errorText = document.getElementById('error-text');
const citationText = document.getElementById('citation-text');
const citationAuthor = document.getElementById('citation-author');
const btnNouvelle = document.getElementById('nouvelle-citation');
const btnRetry = document.getElementById('retry-btn');

// ===== FONCTIONS PRINCIPALES =====

/**
 * üéØ √âTAPE 1 : APPEL API AVEC FETCH
 * 
 * OBJECTIF : R√©cup√©rer une citation depuis l'API quotable.io
 * 
 * üìö CE QUE VOUS ALLEZ APPRENDRE :
 * - Utiliser fetch() pour les appels API
 * - G√©rer les Promises avec async/await
 * - Traiter les r√©ponses JSON
 * - G√©rer les erreurs r√©seau
 * 
 * üí° INDICE : L'API retourne un objet JSON comme :
 * {
 *   "content": "Le succ√®s c'est d'aller d'√©chec en √©chec sans perdre son enthousiasme.",
 *   "author": "Winston Churchill",
 *   "length": 65
 * }
 */
async function obtenirCitation() {
    try {
        // üéØ TODO 1.1 : Afficher l'√©tat de chargement
        console.log('üîÑ D√©but du chargement...');
        afficherLoading();
        
        // üéØ TODO 1.2 : Faire l'appel API avec fetch()
        console.log('üì° Appel API vers:', API_URL);
        const response = await fetch(API_URL);
        
        // üß™ CHECKPOINT 1 : V√©rifiez dans la console Network de votre navigateur
        console.log('üì• R√©ponse re√ßue:', response);
        
        // üéØ TODO 1.3 : V√©rifier si la r√©ponse est correcte
        if (!response.ok) {
            // Gestion sp√©cifique selon le type d'erreur
            if (response.status === 404) {
                throw new Error('Citation non trouv√©e (404)');
            } else if (response.status >= 500) {
                throw new Error('Probl√®me serveur. R√©essayez dans quelques instants.');
            } else {
                throw new Error(`Erreur HTTP: ${response.status}`);
            }
        }
        
        // üéØ TODO 1.4 : Convertir la r√©ponse en JSON
        const data = await response.json();
        
        // üß™ CHECKPOINT 2 : Examinez la structure des donn√©es
        console.log('‚úÖ Donn√©es re√ßues:', data);
        console.log('üìù Citation:', data.content);
        console.log('üë§ Auteur:', data.author);
        
        // üéØ TODO 1.5 : Afficher la citation
        afficherCitation(data);
        
    } catch (error) {
        // üéØ TODO 1.6 : G√©rer les erreurs
        console.error('‚ùå Erreur captur√©e:', error);
        gererErreur(error);
    }
}

/**
 * üéØ √âTAPE 2 : AFFICHAGE DES DONN√âES
 * 
 * OBJECTIF : Mettre √† jour l'interface utilisateur avec les donn√©es re√ßues
 * 
 * üìö CE QUE VOUS ALLEZ APPRENDRE :
 * - Manipulation du DOM avec JavaScript
 * - Gestion des classes CSS pour l'affichage
 * - Accessibilit√© et exp√©rience utilisateur
 * 
 * @param {Object} data - Donn√©es re√ßues de l'API
 * @param {string} data.content - Le texte de la citation
 * @param {string} data.author - L'auteur de la citation
 * @param {number} data.length - La longueur de la citation
 */
function afficherCitation(data) {
    // üéØ TODO 2.1 : Masquer les √©tats de chargement et d'erreur
    masquerLoading();
    masquerErreur();
    
    // üéØ TODO 2.2 : Remplir le contenu textuel
    // ASTUCE : Utilisez textContent pour √©viter les injections XSS
    citationText.textContent = data.content;
    citationAuthor.textContent = data.author;
    
    // üß™ CHECKPOINT 3 : V√©rifiez que le texte appara√Æt correctement
    console.log('üìÑ Citation affich√©e:', citationText.textContent);
    console.log('üë§ Auteur affich√©:', citationAuthor.textContent);
    
    // üéØ TODO 2.3 : Afficher le conteneur de citation
    citationContainer.classList.remove('hidden');
    
    // üéØ TODO 2.4 : R√©activer le bouton pour la prochaine citation
    btnNouvelle.disabled = false;
    btnNouvelle.textContent = 'üîÑ Nouvelle Citation';
    
    // üéØ BONUS : Afficher les fonctionnalit√©s bonus si impl√©ment√©es
    const bonusSection = document.getElementById('bonus-features');
    if (bonusSection) {
        bonusSection.classList.remove('hidden');
    }
    
    // üéØ BONUS : Animer l'apparition (optionnel)
    citationContainer.style.opacity = '0';
    citationContainer.style.transform = 'translateY(20px)';
    setTimeout(() => {
        citationContainer.style.transition = 'all 0.5s ease';
        citationContainer.style.opacity = '1';
        citationContainer.style.transform = 'translateY(0)';
    }, 100);
}

/**
 * üéØ √âTAPE 3 : GESTION DES ERREURS
 * 
 * OBJECTIF : Informer l'utilisateur en cas de probl√®me
 * 
 * üìö CE QUE VOUS ALLEZ APPRENDRE :
 * - Gestion robuste des erreurs
 * - Communication claire avec l'utilisateur
 * - R√©cup√©ration gracieuse apr√®s erreur
 * 
 * @param {Error} error - L'erreur √† traiter
 */
function gererErreur(error) {
    // üéØ TODO 3.1 : Masquer les autres √©tats
    masquerLoading();
    citationContainer.classList.add('hidden');
    
    // üéØ TODO 3.2 : Personnaliser le message d'erreur
    let messageErreur = 'Une erreur inattendue s\'est produite.';
    
    if (error.message.includes('Failed to fetch')) {
        messageErreur = 'Probl√®me de connexion. V√©rifiez votre acc√®s internet.';
    } else if (error.message.includes('404')) {
        messageErreur = 'Citation introuvable. R√©essayons avec une autre.';
    } else if (error.message.includes('500')) {
        messageErreur = 'Le serveur rencontre des difficult√©s. Veuillez patienter.';
    } else {
        messageErreur = error.message;
    }
    
    // üéØ TODO 3.3 : Afficher le message d'erreur
    errorText.textContent = messageErreur;
    errorContainer.classList.remove('hidden');
    
    // üéØ TODO 3.4 : R√©activer les boutons
    btnNouvelle.disabled = false;
    btnNouvelle.textContent = 'üîÑ R√©essayer';
    
    // üß™ CHECKPOINT 4 : L'erreur est-elle bien affich√©e ?
    console.log('‚ö†Ô∏è Erreur affich√©e √† l\'utilisateur:', messageErreur);
}

// ===== FONCTIONS UTILITAIRES =====

/**
 * Affiche l'√©tat de chargement
 */
function afficherLoading() {
    loadingElement.classList.remove('hidden');
    citationContainer.classList.add('hidden');
    errorContainer.classList.add('hidden');
    btnNouvelle.disabled = true;
    btnNouvelle.textContent = '‚è≥ Chargement...';
}

/**
 * Masque l'√©tat de chargement
 */
function masquerLoading() {
    loadingElement.classList.add('hidden');
}

/**
 * Masque l'√©tat d'erreur
 */
function masquerErreur() {
    errorContainer.classList.add('hidden');
}

// ===== √âV√âNEMENTS =====

/**
 * üéØ √âTAPE 4 : GESTION DES √âV√âNEMENTS
 * 
 * OBJECTIF : Rendre l'interface interactive
 * 
 * üìö CE QUE VOUS ALLEZ APPRENDRE :
 * - addEventListener pour l'interactivit√©
 * - √âv√©nements DOM (click, DOMContentLoaded)
 * - Cycle de vie d'une page web
 */

// üéØ TODO 4.1 : √âv√©nement pour le bouton "Nouvelle citation"
btnNouvelle.addEventListener('click', () => {
    console.log('üñ±Ô∏è Clic sur "Nouvelle citation"');
    obtenirCitation();
});

// üéØ TODO 4.2 : √âv√©nement pour le bouton "R√©essayer" (en cas d'erreur)
if (btnRetry) {
    btnRetry.addEventListener('click', () => {
        console.log('üñ±Ô∏è Clic sur "R√©essayer"');
        obtenirCitation();
    });
}

// üéØ TODO 4.3 : Chargement automatique au d√©marrage de la page
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Page charg√©e, r√©cup√©ration de la premi√®re citation...');
    // ASTUCE : Petit d√©lai pour que l'utilisateur voie l'animation de chargement
    setTimeout(() => {
        obtenirCitation();
    }, 500);
});

// üéØ TODO 4.4 : Raccourci clavier (bonus)
document.addEventListener('keydown', (event) => {
    // Appuyer sur Espace pour une nouvelle citation
    if (event.code === 'Space' && !btnNouvelle.disabled && !event.target.matches('input, textarea')) {
        event.preventDefault(); // Emp√™che le scroll de la page
        console.log('‚å®Ô∏è Raccourci clavier d√©tect√© (Espace)');
        obtenirCitation();
    }
});

// ===== FONCTIONNALIT√âS BONUS (OPTIONNELLES) =====

/**
 * üéØ BONUS 1 : PARTAGE SUR LES R√âSEAUX SOCIAUX
 * 
 * Utilise l'API Web Share moderne ou fallback vers le presse-papiers
 */
function partagerCitation() {
    const citation = citationText.textContent;
    const auteur = citationAuthor.textContent;
    const texte = `"${citation}" ‚Äî ${auteur}`;
    
    if (navigator.share) {
        // API Web Share (principalement mobile)
        navigator.share({
            title: 'Citation Inspirante',
            text: texte,
            url: window.location.href
        }).then(() => {
            console.log('üì§ Citation partag√©e avec succ√®s');
        }).catch((error) => {
            console.log('‚ùå Erreur de partage:', error);
            copierDansPressePapier(texte);
        });
    } else {
        // Fallback : copier dans le presse-papiers
        copierDansPressePapier(texte);
    }
}

/**
 * üéØ BONUS 2 : SAUVEGARDE EN FAVORIS (localStorage)
 * 
 * Stocke les citations favorites dans le navigateur
 */
function ajouterAuxFavoris() {
    const citation = {
        content: citationText.textContent,
        author: citationAuthor.textContent,
        date: new Date().toISOString(),
        id: Date.now() // ID unique simple
    };
    
    // R√©cup√©rer les favoris existants
    const favoris = JSON.parse(localStorage.getItem('citations-favoris') || '[]');
    
    // V√©rifier si la citation n'est pas d√©j√† en favoris
    const dejaEnFavoris = favoris.some(fav => 
        fav.content === citation.content && fav.author === citation.author
    );
    
    if (dejaEnFavoris) {
        alert('‚≠ê Cette citation est d√©j√† dans vos favoris !');
        return;
    }
    
    // Ajouter la nouvelle citation
    favoris.push(citation);
    
    // Limiter √† 50 favoris pour √©viter de surcharger localStorage
    if (favoris.length > 50) {
        favoris.shift(); // Supprime le plus ancien
    }
    
    // Sauvegarder
    localStorage.setItem('citations-favoris', JSON.stringify(favoris));
    
    console.log('‚≠ê Citation ajout√©e aux favoris:', citation);
    alert(`‚≠ê Citation ajout√©e aux favoris ! (${favoris.length} au total)`);
}

/**
 * Fonction utilitaire pour copier du texte dans le presse-papiers
 */
function copierDansPressePapier(texte) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(texte).then(() => {
            console.log('üìã Texte copi√© dans le presse-papiers');
            alert('üìã Citation copi√©e dans le presse-papiers !');
        }).catch((error) => {
            console.error('‚ùå Erreur de copie:', error);
        });
    } else {
        // Fallback pour les navigateurs plus anciens
        const textArea = document.createElement('textarea');
        textArea.value = texte;
        document.body.appendChild(textArea);
        textArea.select();
        try {
            document.execCommand('copy');
            alert('üìã Citation copi√©e !');
        } catch (error) {
            console.error('‚ùå Copie impossible:', error);
        }
        document.body.removeChild(textArea);
    }
}

// üéØ BONUS : √âv√©nements pour les fonctionnalit√©s bonus
document.addEventListener('DOMContentLoaded', () => {
    const btnPartager = document.getElementById('partager-btn');
    const btnFavoris = document.getElementById('favoris-btn');
    
    if (btnPartager) {
        btnPartager.addEventListener('click', partagerCitation);
    }
    
    if (btnFavoris) {
        btnFavoris.addEventListener('click', ajouterAuxFavoris);
    }
});

// ===== SYST√àME DE LOGS POUR LE DEBUG =====

/**
 * üéØ AIDE AU DEBUGGING
 * 
 * Tapez dans la console du navigateur :
 * - debugCitations() : Affiche l'√©tat actuel
 * - clearFavoris() : Vide les favoris localStorage
 * - showFavoris() : Affiche tous les favoris
 */
window.debugCitations = function() {
    console.log('üîç √âtat actuel du g√©n√©rateur de citations:');
    console.log('- Loading visible:', !loadingElement.classList.contains('hidden'));
    console.log('- Citation visible:', !citationContainer.classList.contains('hidden'));
    console.log('- Erreur visible:', !errorContainer.classList.contains('hidden'));
    console.log('- Bouton activ√©:', !btnNouvelle.disabled);
    
    if (!citationContainer.classList.contains('hidden')) {
        console.log('- Citation actuelle:', citationText.textContent);
        console.log('- Auteur actuel:', citationAuthor.textContent);
    }
};

window.clearFavoris = function() {
    localStorage.removeItem('citations-favoris');
    console.log('üóëÔ∏è Favoris supprim√©s');
};

window.showFavoris = function() {
    const favoris = JSON.parse(localStorage.getItem('citations-favoris') || '[]');
    console.log(`‚≠ê ${favoris.length} citation(s) en favoris:`, favoris);
};