// ===== GUIDE D'ANALYSE DU CODE PRINCIPAL =====
// Projet : Assignment 1 - API REST avec JavaScript
// Objectif : Comprendre et analyser le code existant dans script.js

/*
üéØ MISSION PRINCIPALE : 
Ce fichier vous aide √† COMPRENDRE le code principal (script.js) qui est d√©j√† complet.
Votre travail : analyser, tester, et d√©boguer le code existant.

üìã UTILISEZ CE FICHIER SI :
- Vous voulez comprendre √©tape par √©tape
- Vous avez besoin d'aide pour analyser le code
- Vous voulez des explications d√©taill√©es
- Vous pr√©f√©rez une approche guid√©e

‚ö†Ô∏è IMPORTANT : Ce fichier ne remplace PAS script.js !
Il sert uniquement √† vous aider √† comprendre le code principal.
*/

// Configuration (identique au script principal)
const API_URL = 'https://api.quotable.io/random';

// ===== SYST√àME D'AIDE POUR COMPRENDRE LE CODE =====

window.analyseCode = {
    // Aide pour comprendre l'appel API
    expliquerAPI: () => {
        console.log("üéì EXPLICATION : Appel API dans script.js");
        console.log("==============================================");
        console.log("1. üì° fetch(API_URL) - Envoie une requ√™te HTTP vers quotable.io");
        console.log("2. ‚è≥ await - Attend la r√©ponse du serveur (asynchrone)");
        console.log("3. ‚úÖ response.ok - V√©rifie si tout s'est bien pass√© (200)");
        console.log("4. üìÑ response.json() - Convertit la r√©ponse en objet JavaScript");
        console.log("5. üé® afficherCitation(data) - Met √† jour l'interface");
        console.log("");
        console.log("üí° Testez l'API directement : debug.testAPI()");
        console.log("üîç Voir le code r√©el : Ouvrez script.js ligne ~40");
    },
    
    // Aide pour comprendre le DOM
    expliquerDOM: () => {
        console.log("üéì EXPLICATION : Manipulation DOM dans script.js");
        console.log("===============================================");
        console.log("1. üéØ document.getElementById() - S√©lectionne un √©l√©ment HTML par son ID");
        console.log("2. ‚úèÔ∏è textContent - Change le texte affich√© (plus s√ªr qu'innerHTML)");
        console.log("3. üëÅÔ∏è classList.remove('hidden') - Rend l'√©l√©ment visible");
        console.log("4. üîÑ disabled = false - R√©active un bouton");
        console.log("5. üé® style.opacity/transform - Animations CSS");
        console.log("");
        console.log("üí° V√©rifiez les √©l√©ments : debug.checkDOM()");
        console.log("üîç Voir le code r√©el : Ouvrez script.js ligne ~90");
    },
    
    // Aide pour comprendre les erreurs
    expliquerErreurs: () => {
        console.log("üéì EXPLICATION : Gestion d'erreurs dans script.js");
        console.log("================================================");
        console.log("1. üõ°Ô∏è try...catch - Capture les erreurs sans planter l'app");
        console.log("2. üì∂ 'Failed to fetch' - Probl√®me de connexion internet");
        console.log("3. üö´ HTTP 404 - Page/ressource non trouv√©e");
        console.log("4. üö´ HTTP 500 - Erreur du serveur API");
        console.log("5. üë• Messages utilisateur - Explications claires (pas techniques)");
        console.log("");
        console.log("üí° Testez les erreurs : coupez internet et cliquez sur le bouton");
        console.log("üîç Voir le code r√©el : Ouvrez script.js ligne ~140");
    },
    
    // Guide d'analyse du code principal
    guidePasAPas: () => {
        console.log("üìã GUIDE D'ANALYSE DU CODE PRINCIPAL (script.js)");
        console.log("================================================");
        console.log("");
        console.log("üîç √âTAPE 1 : Ouvrez script.js et trouvez la fonction obtenirCitation()");
        console.log("   üìç Ligne ~40 : async function obtenirCitation()");
        console.log("   üìö Analysez les TODO 1.1 √† 1.6");
        console.log("   üß™ Regardez les console.log() et checkpoints");
        console.log("");
        console.log("üîç √âTAPE 2 : Trouvez la fonction afficherCitation()");
        console.log("   üìç Ligne ~90 : function afficherCitation(data)");
        console.log("   üìö Analysez les TODO 2.1 √† 2.4");
        console.log("   üé® Notez les animations bonus");
        console.log("");
        console.log("üîç √âTAPE 3 : Trouvez la fonction gererErreur()");
        console.log("   üìç Ligne ~140 : function gererErreur(error)");
        console.log("   üìö Analysez les TODO 3.1 √† 3.4");
        console.log("   üí¨ Observez la personnalisation des messages");
        console.log("");
        console.log("üîç √âTAPE 4 : Trouvez les event listeners");
        console.log("   üìç Ligne ~200 : addEventListener");
        console.log("   üìö Analysez les TODO 4.1 √† 4.4");
        console.log("   ‚å®Ô∏è Testez le raccourci barre d'espace");
        console.log("");
        console.log("üéØ OBJECTIF : Comprendre comment tout s'articule");
    },
    
    // Analyser les variables globales
    expliquerVariables: () => {
        console.log("üîß VARIABLES GLOBALES dans script.js");
        console.log("===================================");
        console.log("const API_URL = 'https://api.quotable.io/random'");
        console.log("   ‚Üí URL de l'API pour r√©cup√©rer les citations");
        console.log("");
        console.log("const loadingElement = document.getElementById('loading')");
        console.log("   ‚Üí R√©f√©rence vers l'√©l√©ment de chargement");
        console.log("");
        console.log("const citationContainer = document.getElementById('citation-container')");
        console.log("   ‚Üí Conteneur principal de la citation");
        console.log("");
        console.log("const citationText = document.getElementById('citation-text')");
        console.log("   ‚Üí √âl√©ment qui affiche le texte de la citation");
        console.log("");
        console.log("const citationAuthor = document.getElementById('citation-author')");
        console.log("   ‚Üí √âl√©ment qui affiche l'auteur");
        console.log("");
        console.log("üí° Ces variables sont pr√©-d√©clar√©es pour √©viter de les chercher √† chaque fois");
    }
};

// ===== OUTILS DE COMPR√âHENSION ET TEST =====

window.testeurCode = {
    // Tester la compr√©hension de l'API
    quizAPI: () => {
        console.log("‚ùì QUIZ : Comprenez-vous l'API ?");
        console.log("================================");
        console.log("Q1: Que fait fetch(API_URL) ?");
        console.log("Q2: Pourquoi utilise-t-on await ?");
        console.log("Q3: Que contient data.content ?");
        console.log("Q4: Que fait response.ok ?");
        console.log("");
        console.log("üí° R√©ponses : testeurCode.reponsesAPI()");
    },
    
    reponsesAPI: () => {
        console.log("‚úÖ R√âPONSES QUIZ API :");
        console.log("=====================");
        console.log("R1: fetch(API_URL) envoie une requ√™te HTTP vers l'API quotable.io");
        console.log("R2: await permet d'attendre la r√©ponse (car internet n'est pas instantan√©)");
        console.log("R3: data.content contient le texte de la citation");
        console.log("R4: response.ok v√©rifie si la requ√™te a r√©ussi (status 200)");
    },
    
    // Analyser le code √©tape par √©tape
    analyserFonction: (nomFonction) => {
        const analyses = {
            obtenirCitation: {
                role: "R√©cup√®re une citation depuis l'API quotable.io",
                parametres: "Aucun",
                retour: "Aucun (void) - met √† jour l'interface",
                etapes: [
                    "1. Affiche l'√©tat de chargement (spinner + bouton d√©sactiv√©)",
                    "2. Fait l'appel API avec fetch() et attend la r√©ponse",
                    "3. V√©rifie que la r√©ponse est correcte (status 200)",
                    "4. Convertit la r√©ponse en objet JavaScript (.json())",
                    "5. Appelle afficherCitation() avec les donn√©es",
                    "6. En cas d'erreur, appelle gererErreur()"
                ],
                concepts: ["async/await", "fetch API", "try/catch", "HTTP status codes"]
            },
            afficherCitation: {
                role: "Met √† jour l'interface avec la citation re√ßue",
                parametres: "data (objet avec content, author, length)",
                retour: "Aucun (void) - modifie le DOM",
                etapes: [
                    "1. Masque le loading et les erreurs pr√©c√©dentes",
                    "2. Remplit le texte de la citation (textContent s√©curis√©)",
                    "3. Remplit le nom de l'auteur",
                    "4. Rend le conteneur visible (remove class 'hidden')",
                    "5. R√©active le bouton pour la prochaine citation",
                    "6. Lance l'animation d'apparition (bonus)"
                ],
                concepts: ["DOM manipulation", "textContent vs innerHTML", "CSS classes", "animations CSS"]
            },
            gererErreur: {
                role: "Affiche un message d'erreur compr√©hensible √† l'utilisateur",
                parametres: "error (objet Error avec message)",
                retour: "Aucun (void) - modifie l'interface",
                etapes: [
                    "1. Masque les autres √©tats (loading, citation)",
                    "2. Analyse le type d'erreur (connexion, 404, 500, autre)",
                    "3. Choisit un message appropri√© (user-friendly)",
                    "4. Affiche le message dans l'interface"
                ],
                concepts: ["Error handling", "UX design", "Messages utilisateur", "Robustesse"]
            }
        };
        
        const analyse = analyses[nomFonction];
        if (analyse) {
            console.log(`üî¨ ANALYSE D√âTAILL√âE : ${nomFonction}()`);
            console.log("=" + "=".repeat(nomFonction.length + 18));
            console.log(`üéØ R√¥le : ${analyse.role}`);
            console.log(`üì• Param√®tres : ${analyse.parametres}`);
            console.log(`üì§ Retour : ${analyse.retour}`);
            console.log("üìã √âtapes :");
            analyse.etapes.forEach(etape => console.log(`   ${etape}`));
            console.log("üéì Concepts abord√©s :");
            analyse.concepts.forEach(concept => console.log(`   - ${concept}`));
            console.log("");
            console.log(`üîç Pour voir le code : Ouvrez script.js et cherchez "function ${nomFonction}"`);
        } else {
            console.log("‚ùå Fonction non trouv√©e. Utilisez : obtenirCitation, afficherCitation, ou gererErreur");
        }
    },
    
    // Tester la compr√©hension globale
    quizGeneral: () => {
        console.log("‚ùì QUIZ G√âN√âRAL : Comprenez-vous le projet ?");
        console.log("==========================================");
        console.log("Q1: Combien de fonctions principales y a-t-il ?");
        console.log("Q2: Quel raccourci clavier g√©n√®re une nouvelle citation ?");
        console.log("Q3: Que fait la classe CSS 'hidden' ?");
        console.log("Q4: Pourquoi utilise-t-on textContent au lieu d'innerHTML ?");
        console.log("");
        console.log("üí° R√©ponses : testeurCode.reponsesGeneral()");
    },
    
    reponsesGeneral: () => {
        console.log("‚úÖ R√âPONSES QUIZ G√âN√âRAL :");
        console.log("=========================");
        console.log("R1: 3 fonctions principales + fonctions utilitaires + bonus");
        console.log("R2: La barre d'espace (Space) g√©n√®re une nouvelle citation");
        console.log("R3: La classe 'hidden' cache un √©l√©ment (display: none)");
        console.log("R4: textContent √©vite les injections XSS (s√©curit√©)");
    }
};

// ===== EXERCICES PRATIQUES =====

window.exercices = {
    // Exercice 1 : Observer le comportement
    exercice1: () => {
        console.log("üèãÔ∏è EXERCICE 1 : Observer le comportement");
        console.log("=======================================");
        console.log("üìã CONSIGNES :");
        console.log("1. Ouvrez votre site avec Live Server sur index.html");
        console.log("2. Ouvrez F12 ‚Üí Console");
        console.log("3. Regardez les messages qui apparaissent automatiquement");
        console.log("4. Cliquez sur 'Nouvelle Citation'");
        console.log("5. Observez les nouveaux messages");
        console.log("6. Notez l'ordre des √©v√©nements");
        console.log("");
        console.log("‚ùì Que voyez-vous ? Tapez exercices.correction1() pour v√©rifier");
    },
    
    correction1: () => {
        console.log("‚úÖ CORRECTION EXERCICE 1 :");
        console.log("=========================");
        console.log("Vous devriez voir cette s√©quence :");
        console.log("1. üöÄ Page charg√©e, r√©cup√©ration de la premi√®re citation...");
        console.log("2. üîÑ D√©but du chargement...");
        console.log("3. üì° Appel API vers: https://api.quotable.io/random");
        console.log("4. üì• R√©ponse re√ßue: Response {status: 200, ok: true, ...}");
        console.log("5. ‚úÖ Donn√©es re√ßues: {content: '...', author: '...', ...}");
        console.log("6. üìù Citation: [texte de la citation]");
        console.log("7. üë§ Auteur: [nom de l'auteur]");
        console.log("8. üìÑ Citation affich√©e: [m√™me texte]");
        console.log("9. üë§ Auteur affich√©: [m√™me auteur]");
        console.log("");
        console.log("üéØ Si vous voyez cette s√©quence, le code fonctionne parfaitement !");
    },
    
    // Exercice 2 : Analyser l'API
    exercice2: () => {
        console.log("üèãÔ∏è EXERCICE 2 : Analyser l'API");
        console.log("=============================");
        console.log("üìã CONSIGNES :");
        console.log("1. Tapez debug.testAPI() dans cette console");
        console.log("2. Regardez la r√©ponse de l'API");
        console.log("3. Identifiez toutes les propri√©t√©s disponibles");
        console.log("4. Comparez avec ce qu'utilise notre code");
        console.log("");
        console.log("‚ùì Quelles propri√©t√©s utilise notre code ? Tapez exercices.correction2()");
    },
    
    correction2: () => {
        console.log("‚úÖ CORRECTION EXERCICE 2 :");
        console.log("=========================");
        console.log("üéØ Propri√©t√©s utilis√©es par notre code :");
        console.log("- data.content ‚Üí Texte de la citation (affich√© dans #citation-text)");
        console.log("- data.author ‚Üí Nom de l'auteur (affich√© dans #citation-author)");
        console.log("");
        console.log("üìä Propri√©t√©s disponibles mais non utilis√©es :");
        console.log("- data.length ‚Üí Longueur de la citation en caract√®res");
        console.log("- data._id ‚Üí Identifiant unique de la citation");
        console.log("- data.tags ‚Üí Array des cat√©gories/tags de la citation");
        console.log("- data.authorSlug ‚Üí Version URL-friendly du nom d'auteur");
        console.log("");
        console.log("üí° Id√©e d'am√©lioration : Vous pourriez afficher la longueur ou les tags !");
    },
    
    // Exercice 3 : Tester les erreurs
    exercice3: () => {
        console.log("üèãÔ∏è EXERCICE 3 : Tester la gestion d'erreurs");
        console.log("==========================================");
        console.log("üìã CONSIGNES :");
        console.log("1. Assurez-vous que votre site fonctionne normalement");
        console.log("2. Coupez votre connexion internet (WiFi off)");
        console.log("3. Cliquez sur 'Nouvelle Citation'");
        console.log("4. Observez le message d'erreur");
        console.log("5. Reconnectez internet");
        console.log("6. Cliquez sur 'R√©essayer'");
        console.log("");
        console.log("‚ùì Que se passe-t-il ? Tapez exercices.correction3()");
    },
    
    correction3: () => {
        console.log("‚úÖ CORRECTION EXERCICE 3 :");
        console.log("=========================");
        console.log("üî¥ Hors ligne - Vous devriez voir :");
        console.log("- Message : 'Probl√®me de connexion. V√©rifiez votre acc√®s internet.'");
        console.log("- Bouton change en 'üîÑ R√©essayer'");
        console.log("- Interface reste stable (pas de plantage)");
        console.log("");
        console.log("üü¢ Reconnect√© - Vous devriez voir :");
        console.log("- Apr√®s clic sur 'R√©essayer' : nouvelle citation s'affiche");
        console.log("- Bouton redevient 'üîÑ Nouvelle Citation'");
        console.log("- S√©quence normale reprend");
        console.log("");
        console.log("üéØ C'est √ßa, une gestion d'erreurs robuste ! L'app ne plante jamais.");
    }
};

// ===== AIDE CONTEXTUELLE =====

window.aide = {
    // Messages selon le niveau
    debutant: () => {
        console.log("üëã AIDE D√âBUTANT : Par o√π commencer ?");
        console.log("====================================");
        console.log("üéØ Votre objectif : COMPRENDRE le code dans script.js (d√©j√† complet)");
        console.log("");
        console.log("üìö Parcours recommand√© :");
        console.log("1. analyseCode.guidePasAPas() ‚Üí Vue d'ensemble du code");
        console.log("2. analyseCode.expliquerAPI() ‚Üí Comprendre les appels API");
        console.log("3. exercices.exercice1() ‚Üí Premier test pratique");
        console.log("4. testeurCode.quizAPI() ‚Üí V√©rifier vos connaissances");
        console.log("");
        console.log("üí° Rappelez-vous : Le code fonctionne d√©j√† ! Votre mission = analyser et comprendre.");
    },
    
    bloque: () => {
        console.log("üÜò AIDE : Vous √™tes bloqu√© ?");
        console.log("===========================");
        console.log("");
        console.log("üîß Probl√®me technique :");
        console.log("   - debug.testAPI() ‚Üí Teste l'API directement");
        console.log("   - debug.checkDOM() ‚Üí V√©rifie les √©l√©ments HTML");
        console.log("   - debugCitations() ‚Üí √âtat actuel de l'application");
        console.log("");
        console.log("ü§î Probl√®me de compr√©hension :");
        console.log("   - analyseCode.expliquerAPI() ‚Üí Explique l'API REST");
        console.log("   - analyseCode.expliquerDOM() ‚Üí Explique la manipulation DOM");
        console.log("   - testeurCode.analyserFonction('obtenirCitation') ‚Üí Analyse d√©taill√©e");
        console.log("");
        console.log("üìö Besoin de th√©orie :");
        console.log("   - Ouvrez : Fichiers d'aide/presentation-atelier.html");
        console.log("   - Ou : Fichiers d'aide/debug-guide.html");
        console.log("");
        console.log("‚ùì Questions sp√©cifiques :");
        console.log("   - testeurCode.quizAPI() ‚Üí Quiz sur les APIs");
        console.log("   - testeurCode.quizGeneral() ‚Üí Quiz sur le projet");
    },
    
    avance: () => {
        console.log("üöÄ AIDE AVANC√â : Aller plus loin");
        console.log("===============================");
        console.log("");
        console.log("üåü Fonctionnalit√©s bonus d√©j√† disponibles :");
        console.log("   - Partage social (fonction partagerCitation)");
        console.log("   - Favoris localStorage (fonction ajouterAuxFavoris)");
        console.log("   - Raccourcis clavier (barre d'espace)");
        console.log("   - Animations CSS (apparition en douceur)");
        console.log("");
        console.log("üé® Id√©es de personnalisations :");
        console.log("   - Modifier les styles CSS (couleurs, polices, layout)");
        console.log("   - Ajouter d'autres propri√©t√©s API (tags, longueur)");
        console.log("   - Int√©grer d'autres APIs (zenquotes.io, quotegarden)");
        console.log("   - Cr√©er un historique des citations vues");
        console.log("");
        console.log("üîß D√©fis techniques :");
        console.log("   - Impl√©menter un syst√®me de cache");
        console.log("   - Ajouter des cat√©gories/filtres");
        console.log("   - Cr√©er un mode sombre/clair");
        console.log("   - Optimiser pour PWA (Progressive Web App)");
    },
    
    // R√©sum√© de toutes les commandes
    toutesCommandes: () => {
        console.log("üìã TOUTES LES COMMANDES DISPONIBLES");
        console.log("==================================");
        console.log("");
        console.log("üéì ANALYSE DU CODE :");
        console.log("   analyseCode.guidePasAPas()");
        console.log("   analyseCode.expliquerAPI()");
        console.log("   analyseCode.expliquerDOM()");
        console.log("   analyseCode.expliquerErreurs()");
        console.log("   analyseCode.expliquerVariables()");
        console.log("");
        console.log("üß™ TESTS ET QUIZ :");
        console.log("   testeurCode.quizAPI()");
        console.log("   testeurCode.quizGeneral()");
        console.log("   testeurCode.analyserFonction('nomFonction')");
        console.log("");
        console.log("üèãÔ∏è EXERCICES PRATIQUES :");
        console.log("   exercices.exercice1() ‚Üí Observer le comportement");
        console.log("   exercices.exercice2() ‚Üí Analyser l'API");
        console.log("   exercices.exercice3() ‚Üí Tester les erreurs");
        console.log("");
        console.log("üÜò AIDE CONTEXTUELLE :");
        console.log("   aide.debutant() ‚Üí Guide pour commencer");
        console.log("   aide.bloque() ‚Üí Si vous √™tes bloqu√©");
        console.log("   aide.avance() ‚Üí Pour aller plus loin");
        console.log("");
        console.log("üîß DEBUG (du script principal) :");
        console.log("   debug.testAPI() ‚Üí Teste l'API");
        console.log("   debug.checkDOM() ‚Üí V√©rifie les √©l√©ments");
        console.log("   debugCitations() ‚Üí √âtat actuel");
    }
};

// ===== FONCTION DE VALIDATION SIMPLE =====

window.testerMonCode = function() {
    console.log('üß™ Test rapide de votre compr√©hension...');
    console.log('========================================');
    
    // Test 1 : Connaissances API
    console.log('‚úÖ Test 1 : Connaissances API');
    console.log('   Le code principal utilise bien fetch() et async/await');
    
    // Test 2 : Connaissances DOM
    console.log('‚úÖ Test 2 : Manipulation DOM');
    console.log('   Le code utilise textContent (s√©curis√©) et classList');
    
    // Test 3 : Gestion d'erreurs
    console.log('‚úÖ Test 3 : Gestion d\'erreurs');
    console.log('   Le code g√®re bien try/catch et messages utilisateur');
    
    console.log('');
    console.log('üéØ Pour approfondir votre compr√©hension :');
    console.log('   ‚Üí analyseCode.guidePasAPas()');
    console.log('   ‚Üí exercices.exercice1()');
    console.log('   ‚Üí testeurCode.quizAPI()');
};

// ===== INITIALISATION ET AIDE =====

console.log("üéì GUIDE D'ANALYSE DU CODE PRINCIPAL");
console.log("===================================");
console.log("");
console.log("Ce fichier vous aide √† COMPRENDRE le code principal (script.js).");
console.log("Le code est d√©j√† complet et fonctionnel !");
console.log("");
console.log("üéØ VOTRE MISSION : Analyser et tester le code existant");
console.log("");
console.log("üöÄ COMMANDES PRINCIPALES :");
console.log("==========================");
console.log("üìö analyseCode.guidePasAPas() ‚Üí Guide complet √©tape par √©tape");
console.log("üîç analyseCode.expliquerAPI() ‚Üí Comprendre les appels API");
console.log("üé® analyseCode.expliquerDOM() ‚Üí Comprendre la manipulation DOM");
console.log("üèãÔ∏è exercices.exercice1() ‚Üí Premier exercice pratique");
console.log("üÜò aide.debutant() ‚Üí Guide pour d√©buter");
console.log("üìã aide.toutesCommandes() ‚Üí Liste compl√®te des commandes");
console.log("");
console.log("üí° RAPPEL : debug.testAPI() et debug.checkDOM() sont aussi disponibles !");

// Auto-suggestion pour guider l'utilisateur
setTimeout(() => {
    console.log("");
    console.log("üí° SUGGESTION : Commencez par analyseCode.guidePasAPas()");
    console.log("   Cela vous donnera une vue d'ensemble du code √† analyser.");
}, 3000);

// Message d'encouragement apr√®s 10 secondes
setTimeout(() => {
    console.log("");
    console.log("üåü N'h√©sitez pas √† explorer ! Ce code est un excellent exemple de bonnes pratiques JavaScript.");
    console.log("   Vous apprenez en analysant du code professionnel - c'est tr√®s formateur !");
}, 10000);